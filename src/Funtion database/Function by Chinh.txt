-- Function: createthanhpho(character, bigint)

-- DROP FUNCTION createthanhpho(character, bigint);

CREATE OR REPLACE FUNCTION createthanhpho(tenquanhuyenthanhpho character, id_tinh bigint)
  RETURNS bigint AS
$BODY$INSERT INTO quanhuyenthanhpho(
            tenquanhuyenthanhpho, id_tinh)
    VALUES ($1,$2) returning id_quanhuyenthanhpho
$BODY$
  LANGUAGE 'sql' VOLATILE
  COST 100;
ALTER FUNCTION createthanhpho(character, bigint) OWNER TO postgres;

-- Function: create_xaphuongthitran(character, bigint)

-- DROP FUNCTION create_xaphuongthitran(character, bigint);

CREATE OR REPLACE FUNCTION create_xaphuongthitran(tenxaphuongthitran character, id_quanhuyenthanhpho bigint)
  RETURNS bigint AS
$BODY$INSERT INTO xaphuongthitran(
            tenxaphuongthitran, id_quanhuyenthanhpho)
    VALUES ($1, $2) returning id_xaphuongthitran$BODY$
  LANGUAGE 'sql' VOLATILE
  COST 100;
ALTER FUNCTION create_xaphuongthitran(character, bigint) OWNER TO postgres;

-- Function: create_thonxom(character, bigint, bigint)

-- DROP FUNCTION create_thonxom(character, bigint, bigint);

CREATE OR REPLACE FUNCTION create_thonxom(tenthonxom character, id_khuvuc bigint, id_xaphuongthitran bigint)
  RETURNS bigint AS
$BODY$INSERT INTO thonxom(
            tenthonxom, id_khuvuc, id_xaphuongthitran)
    VALUES ($1, $2, $3) returning id_thonxom$BODY$
  LANGUAGE 'sql' VOLATILE
  COST 100;
ALTER FUNCTION create_thonxom(character, bigint, bigint) OWNER TO postgres;

-- Function: create_khuvuc(character, character)

-- DROP FUNCTION create_khuvuc(character, character);

CREATE OR REPLACE FUNCTION create_khuvuc(mota character, tenkhuvuc character)
  RETURNS bigint AS
$BODY$INSERT INTO khuvuc(
            mota, tenkhuvuc)
    VALUES ($1,$2) returning id_khuvuc
$BODY$
  LANGUAGE 'sql' VOLATILE
  COST 100;
ALTER FUNCTION create_khuvuc(character, character) OWNER TO postgres;

-- Function: create_dantoc(boolean, character)

-- DROP FUNCTION create_dantoc(boolean, character);

CREATE OR REPLACE FUNCTION create_dantoc(dantocthieuso boolean, tendantoc character)
  RETURNS bigint AS
$BODY$INSERT INTO dantoc(
            dantocthieuso, tendantoc)
    VALUES ($1,$2) returning id_dantoc
$BODY$
  LANGUAGE 'sql' VOLATILE
  COST 100;
ALTER FUNCTION create_dantoc(boolean, character) OWNER TO postgres;

-- Function: create_tinh(character)

-- DROP FUNCTION create_tinh(character);

CREATE OR REPLACE FUNCTION create_tinh(tentinh character)
  RETURNS bigint AS
$BODY$INSERT INTO tinh(tentinh)
    VALUES ($1) returning id_tinh
$BODY$
  LANGUAGE 'sql' VOLATILE
  COST 100;
ALTER FUNCTION create_tinh(character) OWNER TO postgres;

-- Function: create_quequan(character, bigint, bigint, bigint, bigint)

-- DROP FUNCTION create_quequan(character, bigint, bigint, bigint, bigint);

CREATE OR REPLACE FUNCTION create_quequan(quequan character, id_quanhuyenthanhpho bigint, id_xaphuongthitran bigint, id_thonxom bigint, id_tinh bigint)
  RETURNS bigint AS
$BODY$INSERT INTO quequan(
            quequan, id_quanhuyenthanhpho, id_xaphuongthitran, 
            id_thonxom, id_tinh)
    VALUES ($1, $2, $3, 
            $4, $5) returning id_quequan
$BODY$
  LANGUAGE 'sql' VOLATILE
  COST 100;
ALTER FUNCTION create_quequan(character, bigint, bigint, bigint, bigint) OWNER TO postgres;

-- Function: create_nguoidung(date, character, character)

-- DROP FUNCTION create_nguoidung(date, character, character);

CREATE OR REPLACE FUNCTION create_nguoidung(ngaytao date, "password" character, username character)
  RETURNS bigint AS
$BODY$INSERT INTO nguoidung(
             ngaytao, "password", username)
    VALUES ($1,$2,$3) RETURNING id_nguoidung$BODY$
  LANGUAGE 'sql' VOLATILE
  COST 100;
ALTER FUNCTION create_nguoidung(date, character, character) OWNER TO postgres;

-- Function: update_dantoc(bigint, boolean, character)

-- DROP FUNCTION update_dantoc(bigint, boolean, character);

CREATE OR REPLACE FUNCTION update_dantoc(id_dantocin bigint, dantocthieusoin boolean, tendantocin character)
  RETURNS boolean AS
$BODY$
BEGIN
	LOOP
	UPDATE dantoc SET dantocthieuso=dantocthieusoIn , tendantoc=tendantocIn WHERE id_dantoc = id_dantocIn;
	IF found THEN
            RETURN true;
        END IF;
        RETURN false;
        END LOOP;
END;
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100;
ALTER FUNCTION update_dantoc(bigint, boolean, character) OWNER TO postgres;

-- Function: update_quanhuyenthanhpho(bigint, bigint, character)

-- DROP FUNCTION update_quanhuyenthanhpho(bigint, bigint, character);

CREATE OR REPLACE FUNCTION update_quanhuyenthanhpho(id_quanhuyenthanhpho_input bigint, id_tinh_input bigint, tenquanhuyenthanhpho_input character)
  RETURNS boolean AS
$BODY$
BEGIN
	LOOP
	UPDATE quanhuyenthanhpho   SET tenquanhuyenthanhpho=$3, id_tinh=$2 WHERE id_quanhuyenthanhpho=$1;
	IF found THEN
            RETURN true;
        END IF;
        RETURN false;
        END LOOP;
END;
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100;
ALTER FUNCTION update_quanhuyenthanhpho(bigint, bigint, character) OWNER TO postgres;

-- Function: update_tinh(bigint, character)

-- DROP FUNCTION update_tinh(bigint, character);

CREATE OR REPLACE FUNCTION update_tinh(id_tinhinput bigint, tentinhinput character)
  RETURNS boolean AS
$BODY$
BEGIN
	LOOP
	UPDATE tinh SET tentinh=$2 WHERE id_tinh=$1;
	IF found THEN
            RETURN true;
        END IF;
        RETURN false;
        END LOOP;
END;
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100;
ALTER FUNCTION update_tinh(bigint, character) OWNER TO postgres;

-- Function: update_khuvuc(character, character, bigint)

-- DROP FUNCTION update_khuvuc(character, character, bigint);

CREATE OR REPLACE FUNCTION update_khuvuc(mota_in character, tenkhuvuc_in character, id_khuvuc_in bigint)
  RETURNS boolean AS
$BODY$
BEGIN
	LOOP
	UPDATE khuvuc SET mota=$1, tenkhuvuc=$2 WHERE id_khuvuc=$3;
	IF found THEN
            RETURN true;
        END IF;
        RETURN false;
        END LOOP;
END;
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100;
ALTER FUNCTION update_khuvuc(character, character, bigint) OWNER TO postgres;

-- Function: create_hocba(bigint, bigint, bigint)

-- DROP FUNCTION create_hocba(bigint, bigint, bigint);

CREATE OR REPLACE FUNCTION create_hocba(id_namhoc bigint, id_hocsinh bigint, id_lop bigint)
  RETURNS bigint AS
$BODY$INSERT INTO hocba(id_namhoc,id_hocsinh,id_lop)    
VALUES ($1, $2, $3) Returning id_hocba
$BODY$
  LANGUAGE 'sql' VOLATILE
  COST 100;
ALTER FUNCTION create_hocba(bigint, bigint, bigint) OWNER TO postgres;

-- Function: create_loaihocsinh(character, character)

-- DROP FUNCTION create_loaihocsinh(character, character);

CREATE OR REPLACE FUNCTION create_loaihocsinh(mota character, tenloaihocsinh character)
  RETURNS bigint AS
$BODY$INSERT INTO loaihocsinh(
            mota, tenloaihocsinh)
    VALUES ($1, $2) returning id_loaihocsinh;
$BODY$
  LANGUAGE 'sql' VOLATILE
  COST 100;
ALTER FUNCTION create_loaihocsinh(character, character) OWNER TO postgres;

-- Function: create_hocsinhtemp(character, character, character, boolean, boolean, date, date, date, character, character, character, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint)

-- DROP FUNCTION create_hocsinhtemp(character, character, character, boolean, boolean, date, date, date, character, character, character, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint);

CREATE OR REPLACE FUNCTION create_hocsinhtemp(ghichu character, gioitinh character, hinhanh character, ketnapdoan boolean, ketnapdoi boolean, ngaysinh date, ngayvaodoan date, ngayvaodoi date, sonha character, tenhocsinh character, tongiao character, id_quequan bigint, id_thonxom bigint, id_loaihocsinh bigint, id_chedouutien bigint, id_nguoidung bigint, id_khuvuc bigint, id_tinh bigint, id_xaphuongthitran bigint, id_quanhuyenthanhpho bigint, id_dantoc bigint)
  RETURNS bigint AS
$BODY$INSERT INTO hocsinh(
            bixoahaychua,ghichu, gioitinh, hinhanh, ketnapdoan, 
            ketnapdoi, ngaysinh, ngayvaodoan, ngayvaodoi, sonha, tenhocsinh, 
            tongiao, id_quequan, id_thonxom, id_loaihocsinh, id_chedouutien, 
            id_nguoidung, id_khuvuc, id_tinh, id_xaphuongthitran, id_quanhuyenthanhpho, 
            id_dantoc)
	    VALUES (
		false,$1, $2,$3, $4, 
            $5, $6, $7, $8, $9, $10, 
            $11, $12, $13, $14, $15, 
            $16, $17, $18, $19, $20, 
            $21
	    ) returning id_hocsinh;
$BODY$
  LANGUAGE 'sql' VOLATILE;


-- Function: create_hocsinh(character, character, character, boolean, boolean, date, date, date, character, character, character, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, character, character, character, bigint, bigint, bigint, bigint)

-- DROP FUNCTION create_hocsinh(character, character, character, boolean, boolean, date, date, date, character, character, character, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, character, character, character, bigint, bigint, bigint, bigint);

CREATE OR REPLACE FUNCTION create_hocsinh(ghichu_ character, gioitinh_ character, hinhanh_ character, ketnapdoan_ boolean, ketnapdoi_ boolean, ngaysinh_ date, ngayvaodoan_ date, ngayvaodoi_ date, sonha_ character, tenhocsinh_ character, tongiao_ character, id_quequan_ bigint, id_thonxom_ bigint, id_loaihocsinh_ bigint, id_chedouutien_ bigint, id_khuvuc_ bigint, id_tinh_ bigint, id_xaphuongthitran_ bigint, id_quanhuyenthanhpho_ bigint, id_dantoc_ bigint,  username_ character, passwd_ character, quequan_ character, id_quanhuyenthanhpho_qq bigint, id_xaphuongthitran_qq bigint, id_thonxom_qq bigint, id_tinh_qq bigint)
  RETURNS bigint AS
$BODY$
DECLARE
idnguoidung bigint;
idquequan bigint;
idhocsinh bigint;
BEGIN
	LOOP
	BEGIN
	idnguoidung:=create_nguoidung(CURRENT_DATE,passwd_,username_);
	
	EXCEPTION WHEN unique_violation THEN
		    -- do nothing, and loop to try the UPDATE again
		    RETURN 0;
	END;

	--tao que quan
	BEGIN
	idquequan:=create_quequan(quequan_ , id_quanhuyenthanhpho_qq , id_xaphuongthitran_qq , id_thonxom_qq , id_tinh_qq );
	
	EXCEPTION WHEN unique_violation THEN
		    -- do nothing, and loop to try the UPDATE again
		    RETURN 0;
	END;
	
	--bat dau insert hoc sinh xuong
	BEGIN
	idhocsinh:=create_hocsinhtemp (	ghichu_, gioitinh_, hinhanh_, ketnapdoan_, 
					ketnapdoi_, ngaysinh_, ngayvaodoan_, ngayvaodoi_, sonha_, tenhocsinh_, 
					tongiao_, idquequan, id_thonxom_, id_loaihocsinh_, id_chedouutien_, 
					idnguoidung, id_khuvuc_, id_tinh_, id_xaphuongthitran_, id_quanhuyenthanhpho_, 
					id_dantoc_
					);
	
	
	    RETURN idhocsinh;
	EXCEPTION WHEN unique_violation THEN
		    -- do nothing, and loop to try the UPDATE again
		    RETURN 0;
	END;
	END LOOP;
END;
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100;




-- Function: create_chedouutien(character, double precision, character)

-- DROP FUNCTION create_chedouutien(character, double precision, character);

CREATE OR REPLACE FUNCTION create_chedouutien(chuthich character, phantramduocgiam double precision, tenchedouutien character)
  RETURNS bigint AS
$BODY$INSERT INTO chedouutien(
            chuthich, phantramduocgiam, tenchedouutien)
    VALUES ($1,$2,$3) returning id_chedouutien
$BODY$
  LANGUAGE 'sql' VOLATILE
  COST 100;
ALTER FUNCTION create_chedouutien(character, double precision, character) OWNER TO postgres;

-- Function: create_namhoc(integer, integer)

-- DROP FUNCTION create_namhoc(integer, integer);

CREATE OR REPLACE FUNCTION create_namhoc(namsau integer, namtruoc integer)
  RETURNS bigint AS
$BODY$INSERT INTO namhoc(
             namsau, namtruoc)
    VALUES ($1, $2) returning id_namhoc
$BODY$
  LANGUAGE 'sql' VOLATILE
  COST 100;
ALTER FUNCTION create_namhoc(integer, integer) OWNER TO postgres;


-- Function: create_truong(character, character, character, character, date, character, character)

-- DROP FUNCTION create_truong(character, character, character, character, date, character, character);

CREATE OR REPLACE FUNCTION create_truong(diachitruong character, dienthoaitruong character, gioithieutruong character, loaihinhtruong character, ngaythanhlaptruong date, tentruong character, websitetruong character)
  RETURNS bigint AS
$BODY$INSERT INTO truong(diachitruong, dienthoaitruong, gioithieutruong, loaihinhtruong, 
            ngaythanhlaptruong, tentruong, websitetruong)
    VALUES ($1, $2, $3, $4,$5, $6, $7) returning id_truong$BODY$
  LANGUAGE 'sql' VOLATILE
  COST 100;
ALTER FUNCTION create_truong(character, character, character, character, date, character, character) OWNER TO postgres;

-- Function: create_coso(character, character, character, date, character, character, bigint)

-- DROP FUNCTION create_coso(character, character, character, date, character, character, bigint);

CREATE OR REPLACE FUNCTION create_coso(diachicoso character, dienthoaicoso character, gioithieucoso character, ngaythanhlapcoso date, tencoso character, websitecoso character, id_truong bigint)
  RETURNS bigint AS
$BODY$INSERT INTO coso(
            diachicoso, dienthoaicoso, gioithieucoso, ngaythanhlapcoso, 
            tencoso, websitecoso, id_truong)
    VALUES ($1, $2, $3,$4 ,
            $5, $6, $7) returning id_coso$BODY$
  LANGUAGE 'sql' VOLATILE
  COST 100;


-- Function: create_khoilop(character, bigint)

-- DROP FUNCTION create_khoilop(character, bigint);

CREATE OR REPLACE FUNCTION create_khoilop(tenkhoi character, id_coso bigint)
  RETURNS bigint AS
$BODY$INSERT INTO khoilop(tenkhoi, id_coso)
    VALUES ($1, $2) returning id_khoilop$BODY$
  LANGUAGE 'sql' VOLATILE
  COST 100;
ALTER FUNCTION create_khoilop(character, bigint) OWNER TO postgres;

-- Function: create_lop(integer, character, bigint, bigint)

-- DROP FUNCTION create_lop(integer, character, bigint, bigint);

CREATE OR REPLACE FUNCTION create_lop(sisolop integer, tenlop character, id_khoilop bigint, id_namhoc bigint)
  RETURNS bigint AS
$BODY$INSERT INTO lop(sisolop, tenlop,id_khoilop, id_namhoc)
    VALUES ($1, $2, $3,$4) returning id_lop$BODY$
  LANGUAGE 'sql' VOLATILE
  COST 100;
ALTER FUNCTION create_lop(integer, character, bigint, bigint) OWNER TO postgres;

-- Function: create_datatotest()

-- DROP FUNCTION create_datatotest();

CREATE OR REPLACE FUNCTION create_datatotest()
  RETURNS boolean AS
$BODY$
DECLARE 
id_khuvuc bigint;

idtinh1 bigint;
idtinh2 bigint;
idtinh3 bigint;

id_quanhuyen1 bigint;
id_quanhuyen2 bigint;
id_quanhuyen3 bigint;

id_xaphuong1 bigint;
id_xaphuong2 bigint;
id_xaphuong3 bigint;

id_thomxom1 bigint;
id_thomxom2 bigint;
id_thomxom3 bigint;



id_dantoc1 bigint;

id_loaihs bigint;

id_chedouutien bigint;



id_namhoc bigint;
id_truong bigint;
id_coso bigint;
id_khoilop bigint;
id_lop bigint;
BEGIN
	
	--tao lop hoc
	id_namhoc:=create_namhoc(2009 , 2008 );
	id_truong:=create_truong('dai chi truong' , '0987665544' , 'gioi thieu truong nay' , 'ban cong' ,CURRENT_DATE, 'Truong dan lap trinh dan' , 'www.hkhokho.net' );
	id_coso:=create_coso('dai chi co so' , '089875656454' , 'gioi thieu co so ne' , CURRENT_DATE, 'ten co so ne' , 'www.sadasdada.com' , id_truong );
	id_khoilop:=create_khoilop('khoi lop 9' , id_coso );
	id_lop:=create_lop(20 , 'lop 9a3' , id_khoilop , id_namhoc );

	
	
	id_chedouutien:=create_chedouutien('chu thich che do uu tien' , 20  , 'con benh binh' );
	id_loaihs:=create_loaihocsinh('hoc sinh moi vo' , 'hs moi' );
	id_dantoc1:=create_dantoc(false , 'kinh' );
	id_khuvuc:=create_khuvuc('Khu vuc uu tien' , 'khu vuc 1' );

	idtinh1:=create_tinh('Tay Ninh');
	idtinh2:=create_tinh('Binh duong');
	idtinh3:=create_tinh('ho chi minh');

	id_quanhuyen1:=createthanhpho('Ben cau' , idtinh1 );
	id_quanhuyen2:=createthanhpho('Thu dau mot' , idtinh2 );
	id_quanhuyen3:=createthanhpho('Quan I' , idtinh3 );

	id_xaphuong1:=create_xaphuongthitran('Ben cau' , id_quanhuyen1);
	id_xaphuong2:=create_xaphuongthitran('Thu dau mot' , id_quanhuyen2);
	id_xaphuong3:=create_xaphuongthitran('phuong 3' , id_quanhuyen3);


	id_thomxom1:=create_thonxom('khu pho 5' , id_khuvuc , id_xaphuong1 );
	id_thomxom2:=create_thonxom('khu pho 6' , id_khuvuc , id_xaphuong2 );
	id_thomxom3:=create_thonxom('khu pho 7' , id_khuvuc , id_xaphuong3 );

	RETURN true;
END;
    
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100;
ALTER FUNCTION create_datatotest() OWNER TO postgres;


-- Function: del_hocsinh(bigint)

-- DROP FUNCTION del_hocsinh(bigint);

CREATE OR REPLACE FUNCTION del_hocsinh(id_hocsinh_ bigint)
  RETURNS boolean AS
$BODY$
BEGIN
	LOOP
	UPDATE hocsinh SET bixoahaychua=true WHERE id_hocsinh= id_hocsinh_;
	IF found THEN
            RETURN true;
        END IF;
        RETURN false;
        END LOOP;
END;
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100;
ALTER FUNCTION del_hocsinh(bigint) OWNER TO postgres;

-- Function: create_thanhphangiadinh(character, date, character, character, bigint)

-- DROP FUNCTION create_thanhphangiadinh(character, date, character, character, bigint);

CREATE OR REPLACE FUNCTION create_thanhphangiadinh(hoten character, ngaysinh date, nghenghiep character, tenquanhe character, id_hocsinh bigint)
  RETURNS bigint AS
$BODY$INSERT INTO thanhphangiadinh(
            hoten, ngaysinh, nghenghiep, tenquanhe, 
            id_hocsinh)
    VALUES ($1, $2, $3, $4, $5) returning id_thanhphangiadinh$BODY$
  LANGUAGE 'sql' VOLATILE
  COST 100;
ALTER FUNCTION create_thanhphangiadinh(character, date, character, character, bigint) OWNER TO postgres;

-- Function: chuyenlop(bigint, bigint, bigint)

-- DROP FUNCTION chuyenlop(bigint, bigint, bigint);

CREATE OR REPLACE FUNCTION chuyenlop(id_hocsinh_ bigint, id_lopcu_ bigint, id_lopmoi_ bigint)
  RETURNS boolean AS
$BODY$
BEGIN
	LOOP
	-- xoa hoc sinh ra lop cu
	DELETE FROM danhsachlop WHERE id_hocsinh = id_hocsinh_ AND id_lop = id_lopcu_ ;
	IF not found THEN
	RETURN false;
	END IF;
	--them vao lop moi
	BEGIN
	INSERT INTO danhsachlop(id_hocsinh, id_lop) VALUES (id_hocsinh_, id_lopmoi_);
	RETURN true;
        EXCEPTION WHEN unique_violation THEN
	RETURN false;
	END;
	END LOOP;
END;
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100;
ALTER FUNCTION chuyenlop(bigint, bigint, bigint) OWNER TO postgres;

-- Function: create_danhsachlop(bigint, bigint)

-- DROP FUNCTION create_danhsachlop(bigint, bigint);

CREATE OR REPLACE FUNCTION create_danhsachlop(id_hocsinh_ bigint, id_lop_ bigint)
  RETURNS boolean AS
$BODY$
BEGIN
	INSERT INTO danhsachlop(id_hocsinh, id_lop) VALUES (id_hocsinh_, id_lop_);
	RETURN true;
        EXCEPTION WHEN unique_violation THEN
	RETURN false;
END;
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100;
ALTER FUNCTION create_danhsachlop(bigint, bigint) OWNER TO postgres;
